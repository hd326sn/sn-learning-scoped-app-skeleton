<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="bcd721f11b0ed1505785a7dbe54bcb92" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_g_cd3_learning_lms_incident</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>LMS incident events</name>
        <order>50</order>
        <priority/>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[if (current.operation() != 'insert' && current.comments.changes()) { 	 
	if (!isConnect()) 
		gs.eventQueue("lmsincident.commented", current, gs.getUserID(), gs.getUserName()); 
} 

if (current.operation() == 'insert') {
 gs.eventQueue("lmsincident.inserted", current, gs.getUserID(), gs.getUserName());
}

if (current.operation() == 'update'&& !current.comments.changes()) {
 gs.eventQueue("lmsincident.updated", current, gs.getUserID(), gs.getUserName());
}

if (!current.assigned_to.nil() && current.assigned_to.changes()) {
  gs.eventQueue("lmsincident.assigned", current, current.assigned_to.getDisplayValue() , previous.assigned_to.getDisplayValue());
}

if (!current.assignment_group.nil() && current.assignment_group.changes()) {
  gs.eventQueue("lmsincident.assigned.to.group", current, current.assignment_group.getDisplayValue() , previous.assignment_group.getDisplayValue());
}


if (current.priority.changes() && current.priority == 1) {
  gs.eventQueue("lmsincident.priority.1", current, current.priority, previous.priority);
}

if (current.severity.changes() && current.severity== 1) {
  gs.eventQueue("lmsincident.severity.1", current, current.severity, previous.severity);
}

if (current.escalation.changes() && current.escalation > previous.escalation && previous.escalation != -1) {
  gs.eventQueue("lmsincident.escalated", current, current.escalation , previous.escalation );
}

if (current.active.changesTo(false)) {
  gs.eventQueue("lmsincident.inactive", current, current.incident_state, previous.incident_state);
  gs.workflowFlush(current);
}

function isConnect() { 
	var transaction = GlideTransaction.get(); 
	if (!transaction) 
		return false; 

	var request = transaction.getRequest();
	if (!request)
		return false; 

	var path = request.getRequestURI();
	return path && path.match(/\/api\/now\/connect/); 
} ]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>fred.luddy</sys_created_by>
        <sys_created_on>2004-10-26 13:27:23</sys_created_on>
        <sys_domain>bcd721f11b0ed1505785a7dbe54bcb92</sys_domain>
        <sys_domain_path/>
        <sys_id>68dd42001b5e1910afb9a932f54bcbb1</sys_id>
        <sys_mod_count>32</sys_mod_count>
        <sys_name>LMS incident events</sys_name>
        <sys_overrides/>
        <sys_package display_value="System (apps/system1)" source="apps/system1">398372021b1233000b8cca661a4bcb52</sys_package>
        <sys_policy/>
        <sys_scope display_value="Learning Management System Incident">bcd721f11b0ed1505785a7dbe54bcb92</sys_scope>
        <sys_update_name>sys_script_68dd42001b5e1910afb9a932f54bcbb1</sys_update_name>
        <sys_updated_by>Richard.Duong@dss.ca.gov</sys_updated_by>
        <sys_updated_on>2022-09-12 05:19:33</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=68dd42001b5e1910afb9a932f54bcbb1"/>
</record_update>
