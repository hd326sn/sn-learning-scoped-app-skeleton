<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="DELETE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_g_cd3_learning_lms_incident</collection>
        <condition>current.parent_incident.changes() &amp;&amp; !current.parent_incident.nil()</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Derive State value from Parent Incident</name>
        <order>90</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	var ON_HOLD_REASON_AWAITING_CALLER = 1;

	// If child incident is already Closed or Cancelled, child incident should not get re-opened
	if (current.incident_state == IncidentState.CLOSED || current.incident_state == IncidentState.CANCELED)
		return;

	// If parent incident is already Closed or Cancelled, child incident state should not get derived from parent incident
	if (current.parent_incident.incident_state == IncidentState.CLOSED || current.parent_incident.incident_state == IncidentState.CANCELED)
		return;
	
	// If parent incident was re-opened by ESS user, child incident should not get re-opened from a resolved state
	var lastReopenedBy = gs.getUser().getUserByID(current.parent_incident.reopened_by);
	if (!lastReopenedBy.hasRole("itil,sn_incident_write"))
		if (current.incident_state == IncidentState.RESOLVED)
			return;

	// Add a message if child incidents state is being updated to resolved, due to parent incident being resolved
	// Update child incident's close code and close notes to match that of parent incident
	if (current.state != IncidentState.RESOLVED && current.parent_incident.state == IncidentState.RESOLVED) {
		var msg = "";
				
		if (current.isValidField("close_notes") && current.close_notes.nil()) {
			msg = gs.getMessage('{0} copied from Parent Incident', current.close_notes.getLabel());
			if (current.parent_incident.close_notes.toString().indexOf(msg) == 0)
				current.close_notes = current.parent_incident.close_notes;
			else
				current.close_notes = msg + ": " + current.parent_incident.close_notes;
		}
		if(current.isValidField("close_code"))
			current.close_code = current.parent_incident.close_code;

		msg = gs.getMessage("Resolved based on resolution of Parent Incident.");
		if (current.parent_incident.comments.toString().indexOf(msg) == 0)
			current.comments = current.parent_incident.comments;
		else
			current.comments = msg + " " + current.parent_incident.comments;
	}
	else {
		// States other than Resolved should not get synced up if "com.snc.best_practice.incident.kingston" is not active
		// So that customers upgrading from prior to Kingston, do not see a change in behavior
		if (!pm.isActive("com.snc.best_practice.incident.kingston"))
			return;
		
		// If parent_incident is on hold due to AWAITING_CALLER, then child incident state should not get updated
		if ( current.parent_incident.incident_state == IncidentState.ON_HOLD && current.parent_incident.hold_reason == ON_HOLD_REASON_AWAITING_CALLER)
			return;
	}

	// Update child incident's Incident State, State and On Hold Reason fields to match that of parent incident
	current.incident_state = current.parent_incident.incident_state;
	current.state = current.parent_incident.state;
	current.hold_reason = current.parent_incident.hold_reason;

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-05-29 09:00:03</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>854ee3711b821110afb9a932f54bcbcb</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>Derive State value from Parent Incident</sys_name>
        <sys_overrides/>
        <sys_package display_value="Upgrade content for 2011 - activated only for new instances" source="upgrade.2011_common_practice">1e773e021b1633000b8cca661a4bcbdb</sys_package>
        <sys_policy/>
        <sys_scope display_value="Learning Management System Incident">bcd721f11b0ed1505785a7dbe54bcb92</sys_scope>
        <sys_update_name>sys_script_854ee3711b821110afb9a932f54bcbcb</sys_update_name>
        <sys_updated_by>Richard.Duong@dss.ca.gov</sys_updated_by>
        <sys_updated_on>2022-09-22 00:21:16</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="DELETE" query="documentkey=854ee3711b821110afb9a932f54bcbcb"/>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Learning Management System Incident">bcd721f11b0ed1505785a7dbe54bcb92</application>
        <file_path/>
        <instance_id>7cc0d806dbe5dc1077e0b16a329619ae</instance_id>
        <instance_name>cdssdev</instance_name>
        <name>sys_script_854ee3711b821110afb9a932f54bcbcb</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;true&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;x_g_cd3_learning_lms_incident&lt;/collection&gt;&lt;condition&gt;current.parent_incident.changes() &amp;amp;&amp;amp; !current.parent_incident.nil()&lt;/condition&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition/&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;Derive State value from Parent Incident&lt;/name&gt;&lt;order&gt;90&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	var ON_HOLD_REASON_AWAITING_CALLER = 1;

	// If child incident is already Closed or Cancelled, child incident should not get re-opened
	if (current.incident_state == IncidentState.CLOSED || current.incident_state == IncidentState.CANCELED)
		return;

	// If parent incident is already Closed or Cancelled, child incident state should not get derived from parent incident
	if (current.parent_incident.incident_state == IncidentState.CLOSED || current.parent_incident.incident_state == IncidentState.CANCELED)
		return;
	
	// If parent incident was re-opened by ESS user, child incident should not get re-opened from a resolved state
	var lastReopenedBy = gs.getUser().getUserByID(current.parent_incident.reopened_by);
	if (!lastReopenedBy.hasRole("itil,sn_incident_write"))
		if (current.incident_state == IncidentState.RESOLVED)
			return;

	// Add a message if child incidents state is being updated to resolved, due to parent incident being resolved
	// Update child incident's close code and close notes to match that of parent incident
	if (current.state != IncidentState.RESOLVED &amp;&amp; current.parent_incident.state == IncidentState.RESOLVED) {
		var msg = "";
				
		if (current.isValidField("close_notes") &amp;&amp; current.close_notes.nil()) {
			msg = gs.getMessage('{0} copied from Parent Incident', current.close_notes.getLabel());
			if (current.parent_incident.close_notes.toString().indexOf(msg) == 0)
				current.close_notes = current.parent_incident.close_notes;
			else
				current.close_notes = msg + ": " + current.parent_incident.close_notes;
		}
		if(current.isValidField("close_code"))
			current.close_code = current.parent_incident.close_code;

		msg = gs.getMessage("Resolved based on resolution of Parent Incident.");
		if (current.parent_incident.comments.toString().indexOf(msg) == 0)
			current.comments = current.parent_incident.comments;
		else
			current.comments = msg + " " + current.parent_incident.comments;
	}
	else {
		// States other than Resolved should not get synced up if "com.snc.best_practice.incident.kingston" is not active
		// So that customers upgrading from prior to Kingston, do not see a change in behavior
		if (!pm.isActive("com.snc.best_practice.incident.kingston"))
			return;
		
		// If parent_incident is on hold due to AWAITING_CALLER, then child incident state should not get updated
		if ( current.parent_incident.incident_state == IncidentState.ON_HOLD &amp;&amp; current.parent_incident.hold_reason == ON_HOLD_REASON_AWAITING_CALLER)
			return;
	}

	// Update child incident's Incident State, State and On Hold Reason fields to match that of parent incident
	current.incident_state = current.parent_incident.incident_state;
	current.state = current.parent_incident.state;
	current.hold_reason = current.parent_incident.hold_reason;

})(current, previous);]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-05-29 09:00:03&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;854ee3711b821110afb9a932f54bcbcb&lt;/sys_id&gt;&lt;sys_mod_count&gt;13&lt;/sys_mod_count&gt;&lt;sys_name&gt;Derive State value from Parent Incident&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Upgrade content for 2011 - activated only for new instances" source="upgrade.2011_common_practice"&gt;1e773e021b1633000b8cca661a4bcbdb&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Learning Management System Incident"&gt;bcd721f11b0ed1505785a7dbe54bcb92&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_854ee3711b821110afb9a932f54bcbcb&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;Richard.Duong@dss.ca.gov&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-09-22 00:21:16&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;before&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=854ee3711b821110afb9a932f54bcbcb"/&gt;&lt;/record_update&gt;</payload>
        <payload_hash>541953514</payload_hash>
        <record_name>Derive State value from Parent Incident</record_name>
        <reverted_from/>
        <source>549e067d1bc659581d39657ce54bcb59</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>Richard.Duong@dss.ca.gov</sys_created_by>
        <sys_created_on>2022-09-22 00:21:17</sys_created_on>
        <sys_id>059c27ca1bc25110afb9a932f54bcbcd</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>1836291f87e0000001</sys_recorded_at>
        <sys_updated_by>Richard.Duong@dss.ca.gov</sys_updated_by>
        <sys_updated_on>2022-09-22 00:21:17</sys_updated_on>
        <type>Business Rule</type>
        <update_guid>c99c27ca27c25110c1a7d5f1abb38bcc</update_guid>
        <update_guid_history>c99c27ca27c25110c1a7d5f1abb38bcc:541953514,4431f3356a8211105899ea19ae8829f5:861901155</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>Richard.Duong@dss.ca.gov</sys_created_by>
        <sys_created_on>2022-09-22 01:32:11</sys_created_on>
        <sys_db_object display_value="" name="sys_script">sys_script</sys_db_object>
        <sys_id>0a36334111254c1c80c06499b19eb0d1</sys_id>
        <sys_metadata>854ee3711b821110afb9a932f54bcbcb</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Derive State value from Parent Incident</sys_name>
        <sys_package display_value="Upgrade content for 2011 - activated only for new instances" source="upgrade.2011_common_practice">1e773e021b1633000b8cca661a4bcbdb</sys_package>
        <sys_parent display_value="LMS Incident">199c0e3d1bc659581d39657ce54bcbf5</sys_parent>
        <sys_policy/>
        <sys_scope display_value="Learning Management System Incident">bcd721f11b0ed1505785a7dbe54bcb92</sys_scope>
        <sys_scope_delete display_value="">68db4914e75246009aab1510a9440000</sys_scope_delete>
        <sys_update_name>sys_script_854ee3711b821110afb9a932f54bcbcb</sys_update_name>
        <sys_update_version display_value="sys_script_854ee3711b821110afb9a932f54bcbcb">059c27ca1bc25110afb9a932f54bcbcd</sys_update_version>
        <sys_updated_by>Richard.Duong@dss.ca.gov</sys_updated_by>
        <sys_updated_on>2022-09-22 01:32:11</sys_updated_on>
    </sys_metadata_delete>
</record_update>
