<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="DELETE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_g_cd3_learning_lms_incident</collection>
        <condition>current.isValidRecord() &amp;&amp; (current.state.changesTo(IncidentState.RESOLVED) || current.comments.changes() || current.work_notes.changes()) &amp;&amp; (current.child_incidents &gt; 0)</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Update Child Incidents</name>
        <order>1000</order>
        <priority/>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[updateChildIncidents();

function updateChildIncidents() {
	if (current.state.changesTo(IncidentState.RESOLVED))
		resolveChildIncidents();
	else {
		var value;
		
		if (current.comments.changes()) {
			value = deriveFieldValue('comments', gs.getMessage('Comment copied from Parent Incident'));
			
			if (value && value != "")
				executeFlowAction(current, 'comments', value);
		}
		
		if (current.work_notes.changes()) {
			value = deriveFieldValue('work_notes', gs.getMessage('Work note copied from Parent Incident'));
			
			if (value && value != "")
				executeFlowAction(current, 'work_notes', value);
		}
		
	}
}

function executeFlowAction (parentIncidentGr, fieldName, value) {
	
	try {
		var inputs = {};
		inputs['field'] = fieldName; // String 
		inputs['value'] = value; // String 
		inputs['parent_incident_gr'] = parentIncidentGr; // GlideRecord of table: incident 
		sn_fd.FlowAPI.getRunner().action('global.update_child_incidents').inBackground().withInputs(inputs).run();
					
	} catch (ex) {
		var message = ex.getMessage();
		gs.error(message);
	}
	
}

function deriveFieldValue(fieldName, msg) {
	
	var fieldRawValue = current.getValue(fieldName) + '';
	var fieldValue = fieldRawValue.trim();
	
	if (fieldValue && fieldValue.length > 0) {
		
		if (fieldRawValue.indexOf(msg) == 0)
			return (fieldRawValue);
		else
			return (msg + ": " + fieldRawValue);
	}
	
	return;
}

//
// Resolve active, unresolved incidents that are children of the current incident
//
function resolveChildIncidents() {
    //check if update is valid or aborted before updating child incidents
	if(current.isActionAborted())
		return;

	var incident = new GlideRecord("incident");
	incident.addActiveQuery();
	incident.addQuery("parent_incident", current.sys_id);
	incident.addQuery("state", "!=", IncidentState.RESOLVED);
	incident.query();
	var msg = "";
	while (incident.next()) {
		gs.print("Incident " + incident.number + ' resolved based on resolution of Parent Incident ' + current.number);
		incident.state = IncidentState.RESOLVED;
		if (incident.isValidField("close_notes") && incident.close_notes.nil()) {
			msg = gs.getMessage('{0} copied from Parent Incident', current.close_notes.getLabel());
			if (current.close_notes.toString().indexOf(msg) == 0)
				incident.close_notes = current.close_notes;
			else
				incident.close_notes = msg + ": " + current.close_notes;
		}
		if(incident.isValidField("close_code"))
			incident.close_code = current.close_code;
		msg = gs.getMessage("Resolved based on resolution of Parent Incident.");
		if (current.comments.toString().indexOf(msg) == 0)
			incident.comments = current.comments;
		else
			incident.comments = msg + " " + current.comments;
		incident.work_notes = current.work_notes;
		incident.update();
	}
}]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2010-05-13 01:58:00</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>384ee3711b821110afb9a932f54bcba1</sys_id>
        <sys_mod_count>111</sys_mod_count>
        <sys_name>Update Child Incidents</sys_name>
        <sys_overrides/>
        <sys_package display_value="Upgrade content for 2011 - activated only for new instances" source="upgrade.2011_common_practice">1e773e021b1633000b8cca661a4bcbdb</sys_package>
        <sys_policy/>
        <sys_scope display_value="Learning Management System Incident">bcd721f11b0ed1505785a7dbe54bcb92</sys_scope>
        <sys_update_name>sys_script_384ee3711b821110afb9a932f54bcba1</sys_update_name>
        <sys_updated_by>Richard.Duong@dss.ca.gov</sys_updated_by>
        <sys_updated_on>2022-09-22 00:21:15</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="DELETE" query="documentkey=384ee3711b821110afb9a932f54bcba1"/>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Learning Management System Incident">bcd721f11b0ed1505785a7dbe54bcb92</application>
        <file_path/>
        <instance_id>7cc0d806dbe5dc1077e0b16a329619ae</instance_id>
        <instance_name>cdssdev</instance_name>
        <name>sys_script_384ee3711b821110afb9a932f54bcba1</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;false&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;x_g_cd3_learning_lms_incident&lt;/collection&gt;&lt;condition&gt;current.isValidRecord() &amp;amp;&amp;amp; (current.state.changesTo(IncidentState.RESOLVED) || current.comments.changes() || current.work_notes.changes()) &amp;amp;&amp;amp; (current.child_incidents &amp;gt; 0)&lt;/condition&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition/&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;Update Child Incidents&lt;/name&gt;&lt;order&gt;1000&lt;/order&gt;&lt;priority/&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[updateChildIncidents();

function updateChildIncidents() {
	if (current.state.changesTo(IncidentState.RESOLVED))
		resolveChildIncidents();
	else {
		var value;
		
		if (current.comments.changes()) {
			value = deriveFieldValue('comments', gs.getMessage('Comment copied from Parent Incident'));
			
			if (value &amp;&amp; value != "")
				executeFlowAction(current, 'comments', value);
		}
		
		if (current.work_notes.changes()) {
			value = deriveFieldValue('work_notes', gs.getMessage('Work note copied from Parent Incident'));
			
			if (value &amp;&amp; value != "")
				executeFlowAction(current, 'work_notes', value);
		}
		
	}
}

function executeFlowAction (parentIncidentGr, fieldName, value) {
	
	try {
		var inputs = {};
		inputs['field'] = fieldName; // String 
		inputs['value'] = value; // String 
		inputs['parent_incident_gr'] = parentIncidentGr; // GlideRecord of table: incident 
		sn_fd.FlowAPI.getRunner().action('global.update_child_incidents').inBackground().withInputs(inputs).run();
					
	} catch (ex) {
		var message = ex.getMessage();
		gs.error(message);
	}
	
}

function deriveFieldValue(fieldName, msg) {
	
	var fieldRawValue = current.getValue(fieldName) + '';
	var fieldValue = fieldRawValue.trim();
	
	if (fieldValue &amp;&amp; fieldValue.length &gt; 0) {
		
		if (fieldRawValue.indexOf(msg) == 0)
			return (fieldRawValue);
		else
			return (msg + ": " + fieldRawValue);
	}
	
	return;
}

//
// Resolve active, unresolved incidents that are children of the current incident
//
function resolveChildIncidents() {
    //check if update is valid or aborted before updating child incidents
	if(current.isActionAborted())
		return;

	var incident = new GlideRecord("incident");
	incident.addActiveQuery();
	incident.addQuery("parent_incident", current.sys_id);
	incident.addQuery("state", "!=", IncidentState.RESOLVED);
	incident.query();
	var msg = "";
	while (incident.next()) {
		gs.print("Incident " + incident.number + ' resolved based on resolution of Parent Incident ' + current.number);
		incident.state = IncidentState.RESOLVED;
		if (incident.isValidField("close_notes") &amp;&amp; incident.close_notes.nil()) {
			msg = gs.getMessage('{0} copied from Parent Incident', current.close_notes.getLabel());
			if (current.close_notes.toString().indexOf(msg) == 0)
				incident.close_notes = current.close_notes;
			else
				incident.close_notes = msg + ": " + current.close_notes;
		}
		if(incident.isValidField("close_code"))
			incident.close_code = current.close_code;
		msg = gs.getMessage("Resolved based on resolution of Parent Incident.");
		if (current.comments.toString().indexOf(msg) == 0)
			incident.comments = current.comments;
		else
			incident.comments = msg + " " + current.comments;
		incident.work_notes = current.work_notes;
		incident.update();
	}
}]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2010-05-13 01:58:00&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;384ee3711b821110afb9a932f54bcba1&lt;/sys_id&gt;&lt;sys_mod_count&gt;111&lt;/sys_mod_count&gt;&lt;sys_name&gt;Update Child Incidents&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Upgrade content for 2011 - activated only for new instances" source="upgrade.2011_common_practice"&gt;1e773e021b1633000b8cca661a4bcbdb&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Learning Management System Incident"&gt;bcd721f11b0ed1505785a7dbe54bcb92&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_384ee3711b821110afb9a932f54bcba1&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;Richard.Duong@dss.ca.gov&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-09-22 00:21:15&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;before&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=384ee3711b821110afb9a932f54bcba1"/&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-419669808</payload_hash>
        <record_name>Update Child Incidents</record_name>
        <reverted_from/>
        <source>549e067d1bc659581d39657ce54bcb59</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>Richard.Duong@dss.ca.gov</sys_created_by>
        <sys_created_on>2022-09-22 00:21:15</sys_created_on>
        <sys_id>fc9c27ca1bc25110afb9a932f54bcb47</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>1836291f3730000001</sys_recorded_at>
        <sys_updated_by>Richard.Duong@dss.ca.gov</sys_updated_by>
        <sys_updated_on>2022-09-22 00:21:15</sys_updated_on>
        <type>Business Rule</type>
        <update_guid>b49c27ca4ac25110b6d8ee92ba5e5247</update_guid>
        <update_guid_history>b49c27ca4ac25110b6d8ee92ba5e5247:-419669808,fb213fb16e821110c281c53bdeab7c79:-614762179</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>Richard.Duong@dss.ca.gov</sys_created_by>
        <sys_created_on>2022-09-22 01:32:05</sys_created_on>
        <sys_db_object display_value="" name="sys_script">sys_script</sys_db_object>
        <sys_id>11b4c47e9eda4904b1439c10cb09dae4</sys_id>
        <sys_metadata>384ee3711b821110afb9a932f54bcba1</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Update Child Incidents</sys_name>
        <sys_package display_value="Upgrade content for 2011 - activated only for new instances" source="upgrade.2011_common_practice">1e773e021b1633000b8cca661a4bcbdb</sys_package>
        <sys_parent display_value="LMS Incident">199c0e3d1bc659581d39657ce54bcbf5</sys_parent>
        <sys_policy/>
        <sys_scope display_value="Learning Management System Incident">bcd721f11b0ed1505785a7dbe54bcb92</sys_scope>
        <sys_scope_delete display_value="">68db4914e75246009aab1510a9440000</sys_scope_delete>
        <sys_update_name>sys_script_384ee3711b821110afb9a932f54bcba1</sys_update_name>
        <sys_update_version display_value="sys_script_384ee3711b821110afb9a932f54bcba1">fc9c27ca1bc25110afb9a932f54bcb47</sys_update_version>
        <sys_updated_by>Richard.Duong@dss.ca.gov</sys_updated_by>
        <sys_updated_on>2022-09-22 01:32:05</sys_updated_on>
    </sys_metadata_delete>
</record_update>
