<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="DELETE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>incident</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="incident">sys_class_name!=x_451182_lms_lms_incidents^EQ<item display_value="LMS Incidents" endquery="false" field="sys_class_name" goto="false" newquery="false" operator="!=" or="false" value="x_451182_lms_lms_incidents"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>incident events</name>
        <order>50</order>
        <priority/>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[if (current.operation() != 'insert' && current.comments.changes()) { 	 
	if (!isConnect()) 
		gs.eventQueue("incident.commented", current, gs.getUserID(), gs.getUserName()); 
} 

if (current.operation() == 'insert') {
 gs.eventQueue("incident.inserted", current, gs.getUserID(), gs.getUserName());
}

if (current.operation() == 'update'&& !current.comments.changes()) {
 gs.eventQueue("incident.updated", current, gs.getUserID(), gs.getUserName());
}

if (!current.assigned_to.nil() && current.assigned_to.changes()) {
  gs.eventQueue("incident.assigned", current, current.assigned_to.getDisplayValue() , previous.assigned_to.getDisplayValue());
}

if (!current.assignment_group.nil() && current.assignment_group.changes()) {
  gs.eventQueue("incident.assigned.to.group", current, current.assignment_group.getDisplayValue() , previous.assignment_group.getDisplayValue());
}


if (current.priority.changes() && current.priority == 1) {
  gs.eventQueue("incident.priority.1", current, current.priority, previous.priority);
}

if (current.severity.changes() && current.severity== 1) {
  gs.eventQueue("incident.severity.1", current, current.severity, previous.severity);
}

if (current.escalation.changes() && current.escalation > previous.escalation && previous.escalation != -1) {
  gs.eventQueue("incident.escalated", current, current.escalation , previous.escalation );
}

if (current.active.changesTo(false)) {
  gs.eventQueue("incident.inactive", current, current.incident_state, previous.incident_state);
  gs.workflowFlush(current);
}

function isConnect() { 
	var transaction = GlideTransaction.get(); 
	if (!transaction) 
		return false; 

	var request = transaction.getRequest();
	if (!request)
		return false; 

	var path = request.getRequestURI();
	return path && path.match(/\/api\/now\/connect/); 
} ]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>fred.luddy</sys_created_by>
        <sys_created_on>2004-10-26 13:27:23</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>d56b5d71c0a80164019d0e0be2cf784f</sys_id>
        <sys_mod_count>32</sys_mod_count>
        <sys_name>incident events</sys_name>
        <sys_overrides/>
        <sys_package display_value="System (apps/system1)" source="apps/system1">398372021b1233000b8cca661a4bcb52</sys_package>
        <sys_policy/>
        <sys_scope display_value="Global">global</sys_scope>
        <sys_update_name>sys_script_d56b5d71c0a80164019d0e0be2cf784f</sys_update_name>
        <sys_updated_by>Richard.Duong@dss.ca.gov</sys_updated_by>
        <sys_updated_on>2022-09-12 05:19:33</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="DELETE" query="documentkey=d56b5d71c0a80164019d0e0be2cf784f"/>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Global">global</application>
        <file_path/>
        <instance_id>7cc0d806dbe5dc1077e0b16a329619ae</instance_id>
        <instance_name>cdssdev</instance_name>
        <name>sys_script_d56b5d71c0a80164019d0e0be2cf784f</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;true&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;incident&lt;/collection&gt;&lt;condition/&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition table="incident"&gt;sys_class_name!=x_451182_lms_lms_incidents^EQ&lt;item display_value="LMS Incidents" endquery="false" field="sys_class_name" goto="false" newquery="false" operator="!=" or="false" value="x_451182_lms_lms_incidents"/&gt;&lt;item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/&gt;&lt;/filter_condition&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;incident events&lt;/name&gt;&lt;order&gt;50&lt;/order&gt;&lt;priority/&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[if (current.operation() != 'insert' &amp;&amp; current.comments.changes()) { 	 
	if (!isConnect()) 
		gs.eventQueue("incident.commented", current, gs.getUserID(), gs.getUserName()); 
} 

if (current.operation() == 'insert') {
 gs.eventQueue("incident.inserted", current, gs.getUserID(), gs.getUserName());
}

if (current.operation() == 'update'&amp;&amp; !current.comments.changes()) {
 gs.eventQueue("incident.updated", current, gs.getUserID(), gs.getUserName());
}

if (!current.assigned_to.nil() &amp;&amp; current.assigned_to.changes()) {
  gs.eventQueue("incident.assigned", current, current.assigned_to.getDisplayValue() , previous.assigned_to.getDisplayValue());
}

if (!current.assignment_group.nil() &amp;&amp; current.assignment_group.changes()) {
  gs.eventQueue("incident.assigned.to.group", current, current.assignment_group.getDisplayValue() , previous.assignment_group.getDisplayValue());
}


if (current.priority.changes() &amp;&amp; current.priority == 1) {
  gs.eventQueue("incident.priority.1", current, current.priority, previous.priority);
}

if (current.severity.changes() &amp;&amp; current.severity== 1) {
  gs.eventQueue("incident.severity.1", current, current.severity, previous.severity);
}

if (current.escalation.changes() &amp;&amp; current.escalation &gt; previous.escalation &amp;&amp; previous.escalation != -1) {
  gs.eventQueue("incident.escalated", current, current.escalation , previous.escalation );
}

if (current.active.changesTo(false)) {
  gs.eventQueue("incident.inactive", current, current.incident_state, previous.incident_state);
  gs.workflowFlush(current);
}

function isConnect() { 
	var transaction = GlideTransaction.get(); 
	if (!transaction) 
		return false; 

	var request = transaction.getRequest();
	if (!request)
		return false; 

	var path = request.getRequestURI();
	return path &amp;&amp; path.match(/\/api\/now\/connect/); 
} ]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;fred.luddy&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2004-10-26 13:27:23&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;d56b5d71c0a80164019d0e0be2cf784f&lt;/sys_id&gt;&lt;sys_mod_count&gt;32&lt;/sys_mod_count&gt;&lt;sys_name&gt;incident events&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="System (apps/system1)" source="apps/system1"&gt;398372021b1233000b8cca661a4bcb52&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_d56b5d71c0a80164019d0e0be2cf784f&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;Richard.Duong@dss.ca.gov&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-09-12 05:19:33&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;after&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=d56b5d71c0a80164019d0e0be2cf784f"/&gt;&lt;/record_update&gt;</payload>
        <payload_hash>459603257</payload_hash>
        <record_name>incident events</record_name>
        <reverted_from/>
        <source>04e8eb4c1bbbcd501d39657ce54bcbfb</source>
        <source_table>sys_update_set</source_table>
        <state>current</state>
        <sys_created_by>Richard.Duong@dss.ca.gov</sys_created_by>
        <sys_created_on>2022-09-12 05:19:33</sys_created_on>
        <sys_id>70f051c71b359d181d39657ce54bcbce</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>183302373640000001</sys_recorded_at>
        <sys_updated_by>Richard.Duong@dss.ca.gov</sys_updated_by>
        <sys_updated_on>2022-09-12 05:19:33</sys_updated_on>
        <type>Business Rule</type>
        <update_guid>38f051c7fe359d1820f757873d74b3cd</update_guid>
        <update_guid_history>38f051c7fe359d1820f757873d74b3cd:459603257,afde784c18719dd49023eab204ae1eff:-1682063128,98de384c4b719dd40015e298d333c2fa:-1715145828,59aeeacb042d59d4a08a1a8c0c0a0f00:1592210348,f2ed2e8b5f2d59d402530e1a23152e54:1212576187,6dadea8bdd2d59d487b5b0803a4702ae:260180302,e65be2c75e2d59d40716b346deacf41e:1281805846,81e9aa07eb2d59d4cd450d10a89cb0af:-673451873,7a52264342e959d41a575b8b23bc931a:-70288610,72063947dc6559d4d989291b2dbdefce:-1682063128,eb1cba6e82cc1110e799d892025dafc1:904182488,2b1c3a6e33cc111005ecae3045f898fd:-1682063128</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>Richard.Duong@dss.ca.gov</sys_created_by>
        <sys_created_on>2022-09-22 01:32:14</sys_created_on>
        <sys_db_object display_value="" name="sys_script">sys_script</sys_db_object>
        <sys_id>37491c34577147f4a50ad3660ee162e4</sys_id>
        <sys_metadata>d07c7b861b065110afb9a932f54bcbdd</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>incident events</sys_name>
        <sys_package display_value="System (apps/system1)" source="apps/system1">398372021b1233000b8cca661a4bcb52</sys_package>
        <sys_parent display_value="LMS Incident">199c0e3d1bc659581d39657ce54bcbf5</sys_parent>
        <sys_policy/>
        <sys_scope display_value="Learning Management System Incident">bcd721f11b0ed1505785a7dbe54bcb92</sys_scope>
        <sys_scope_delete display_value="">68db4914e75246009aab1510a9440000</sys_scope_delete>
        <sys_update_name>sys_script_d56b5d71c0a80164019d0e0be2cf784f</sys_update_name>
        <sys_update_version display_value="sys_script_d56b5d71c0a80164019d0e0be2cf784f">70f051c71b359d181d39657ce54bcbce</sys_update_version>
        <sys_updated_by>Richard.Duong@dss.ca.gov</sys_updated_by>
        <sys_updated_on>2022-09-22 01:32:14</sys_updated_on>
    </sys_metadata_delete>
</record_update>
